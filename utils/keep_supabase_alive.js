// Script pour maintenir Supabase actif
// √Ä lancer avec: node utils/keep_supabase_alive.js
// Ou en mode continu: node utils/keep_supabase_alive.js --continuous

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// V√©rification des variables d'environnement
if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  console.error('NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ' : '‚ùå');
  console.error('NEXT_PUBLIC_SUPABASE_ANON_KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

// Initialisation Supabase
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

// Fonction pour g√©n√©rer du trafic
async function generateTraffic() {
  try {
    console.log('üîÑ G√©n√©ration de trafic Supabase...');
    
    // 1. Test de connexion
    const { data: testData, error: testError } = await supabase
      .from('commandes')
      .select('count')
      .limit(1);
    
    if (testError) {
      console.log('‚ö†Ô∏è Erreur de connexion:', testError.message);
      return false;
    }
    
    console.log('‚úÖ Connexion Supabase √©tablie');
    
    // 2. Lecture de donn√©es (simulation)
    const { data: readData, error: readError } = await supabase
      .from('commandes')
      .select('*')
      .limit(5);
    
    if (readError) {
      console.log('‚ö†Ô∏è Erreur de lecture:', readError.message);
    } else {
      console.log('‚úÖ Donn√©es lues:', readData?.length || 0, 'commandes');
    }
    
    // 3. Test d'√©criture (optionnel - pour maintenir l'activit√©)
    const timestamp = new Date().toISOString();
    const testRecord = {
      test_maintenance: true,
      timestamp: timestamp,
      message: 'Maintenance automatique Supabase'
    };
    
    // Note: On ne fait pas d'√©criture r√©elle pour √©viter de polluer la DB
    console.log('‚úÖ Test d\'√©criture simul√©');
    
    console.log('üéâ Trafic Supabase g√©n√©r√© avec succ√®s !');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration de trafic:', error.message);
    return false;
  }
}

// Fonction principale
async function main() {
  console.log('üöÄ D√©marrage du script de maintenance Supabase...');
  console.log('URL Supabase:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ Configur√©' : '‚ùå Non configur√©');
  
  // Test initial
  const success = await generateTraffic();
  
  if (!success) {
    console.error('‚ùå √âchec du test initial');
    process.exit(1);
  }
  
  // Mode continu
  if (process.argv.includes('--continuous')) {
    console.log('üîÑ Mode continu activ√© (6 heures par d√©faut)');
    
    const interval = process.argv.includes('--interval') 
      ? parseInt(process.argv[process.argv.indexOf('--interval') + 1]) 
      : 6 * 60 * 60 * 1000; // 6 heures par d√©faut
    
    console.log(`‚è∞ Intervalle: ${interval / (60 * 60 * 1000)} heures`);
    
    setInterval(async () => {
      console.log('\nüîÑ G√©n√©ration de trafic p√©riodique...');
      console.log('‚è∞', new Date().toISOString());
      
      const success = await generateTraffic();
      if (!success) {
        console.log('‚ö†Ô∏è √âchec de la g√©n√©ration de trafic');
      }
      
      console.log(`‚è∞ Prochaine g√©n√©ration dans ${interval / (60 * 60 * 1000)} heures`);
    }, interval);
    
    // Premi√®re ex√©cution imm√©diate
    console.log('üöÄ Premi√®re g√©n√©ration de trafic...');
    await generateTraffic();
    
  } else {
    console.log('‚úÖ Test unique termin√©');
  }
}

main().catch(console.error); 