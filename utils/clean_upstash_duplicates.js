// Script pour ne garder que la derni√®re commande dans Upstash Redis
// √Ä lancer avec: node utils/clean_upstash_duplicates.js

const { Redis } = require('@upstash/redis');

// V√©rification des variables d'environnement
if (!process.env.UPSTASH_REDIS_REST_URL || !process.env.UPSTASH_REDIS_REST_TOKEN) {
  console.error('‚ùå Variables d\'environnement manquantes:');
  console.error('UPSTASH_REDIS_REST_URL:', process.env.UPSTASH_REDIS_REST_URL ? '‚úÖ' : '‚ùå');
  console.error('UPSTASH_REDIS_REST_TOKEN:', process.env.UPSTASH_REDIS_REST_TOKEN ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

const redis = new Redis({
  url: process.env.UPSTASH_REDIS_REST_URL,
  token: process.env.UPSTASH_REDIS_REST_TOKEN,
});

async function keepLastOne() {
  try {
    const keyList = 'commandes';
    const commandeIds = await redis.lrange(keyList, 0, -1);
    
    console.log(`üìã Commandes trouv√©es: ${commandeIds.length}`);
    console.log(`üìù IDs: ${commandeIds.join(', ')}`);
    
    if (commandeIds.length <= 1) {
      console.log('‚úÖ Il y a d√©j√† 1 commande ou moins, rien √† faire.');
      return;
    }
    
    // On garde seulement la premi√®re (la plus r√©cente)
    const toKeep = commandeIds.slice(0, 1);
    const toDelete = commandeIds.slice(1);

    // Remplace la liste par la derni√®re
    await redis.del(keyList);
    await redis.lpush(keyList, toKeep[0]);
    
    console.log(`‚úÖ Commande conserv√©e: ${toKeep[0]}`);
    console.log(`üóëÔ∏è Commandes supprim√©es: ${toDelete.join(', ')}`);

    // Supprime les cl√©s orphelines (commande:...) des commandes supprim√©es
    for (const id of toDelete) {
      const key = `commande:${id}`;
      await redis.del(key);
      console.log(`üóëÔ∏è Cl√© supprim√©e: ${key}`);
    }
    
    console.log('‚úÖ Nettoyage termin√© avec succ√®s!');
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  }
}

keepLastOne().then(() => process.exit(0)); 